/**
 *  checkbox与checkboxGroup的封装
 */

步骤1： 单独使用的checkbox
        禁用、是否选中、是否有label、实现双向数据绑定的value、选中的值trueValue,未选中的值falseValue
//checkbox.vue
<template>
  <label>
    <span>
       <input type="checkbox"
                   :disabled="disabled"
                   :checked="currentValue"
                   @change = "change" >
    </span>
    <slot><span v-if="group">{{label}}</span></slot>
  </label>
</template>
<script>
  export default {
    name: "cCheckbox",
    props:{
      value:{
        type: [String, Number, Boolean],
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      trueValue: {
        type: [String, Number, Boolean],
        default:true
      },
      falseValue: {
        type: [String, Number, Boolean],
        default:false
      },
      label:{
        type:[String, Number, Boolean]
      }
    },
    data(){
      return{
        currentValue: this.value,
      }
    },
    methods:{
      change(event){
        if(this.disabled){ // 当前复选框被禁用，则直接停止
          return false;
        }

        const checked = event.target.checked; // 获取当前复选框的是否选中的状态
        this.currentValue = checked  // 赋值

        const value = checked ? this.trueValue : this.falseValue
        this.$emit('input', value)

        this.$emit('change', value)
        // 向上级form-item派发on-form-change事件
        this.dispatch('cFormItem', 'on-form-change', value)

      }
    }
  }
</script>

步骤2：实现v-model，是由内往外的。通过点击input的选择，会通知到使用者，而使用者修改乐prop的value,
        checkbox没有做出相应。此时需要进行监听，当父修改乐，子进行调用updateModel方法，进行修改内部的
        currentValue值
//checkbox.vue
export default {
    watch:{
      value(val){
        if(val === this.trueValue || val === this.falseValue){
          this.updateModel();
        }else {
          // throw 'Value should be trueValue or falseValue.';
        }
      }
    },
    methods:{
      /** 监听，当父级修改时，同步修改内部的currentValue */
      updateModel () {
        this.currentValue = this.value === this.trueValue;
      },
    }
  }

步骤3： 使用mixins 在change事件触发时，像Form派发一个事件
<script>
  import mixins from '@/assets/js/mixins'
  export default {
    mixins:[mixins],
    methods:{
      change(event){
        if(this.disabled){ // 当前复选框被禁用，则直接停止
          return false;
        }

        const checked = event.target.checked; // 获取当前复选框的是否选中的状态
        this.currentValue = checked  // 赋值

        const value = checked ? this.trueValue : this.falseValue
        this.$emit('input', value)
        this.$emit('change', value)
        // 向上级form-item派发on-form-change事件
        this.dispatch('cFormItem', 'on-form-change', value)

      }
    }
  }
</script>

注： checkbox可以单独使用。

步骤4 编写组合使用的checkboxGroup
//checkbox.vue
<template>
  <label>
    <span>
      <input type="checkbox"
             v-if="group"
             :disabled="disabled"
             :value="label"
             :checked="currentValue"
             v-model="model"
             @change = "change"
      >
      <input type="checkbox"
             v-else
             :disabled="disabled"
             :checked="currentValue"
             @change = "change"
      >
    </span>
    <slot><span v-if="group">{{label}}</span></slot>
  </label>
</template>

<script>
  import { findComponentUpward } from '@/assets/js/assist'
  export default {
    name: "cCheckbox",
      label:{
        type:[String, Number, Boolean]
      }
    },
    data(){
      return{
        model: [],
        group: false,
        parent: null,
      }
    },
    mounted(){
      this.parent = findComponentUpward(this, 'cCheckboxGroup')
      if(this.parent){
        this.group = true;
      }
      if(this.group){
        this.parent.updateModel(true)
      }else{
        this.updateModel()
      }
    },
  }
</script>
注：assist.js
function findComponentUpward(context,componentName){
  let parent = context.$parent; // 获取当前节点的父节点
  let name = parent.$options.name // 得到父节点的名字

 /**
  *  while循环体中不断覆盖当前的parent对象，通过判断组件（即parent）的name与传入的componentName是否一致
  *  直到找到最近的一个匹配组件为止
  * */
  while(parent && (!name || [componentName].indexOf(name)<0)){ // 当前节点的父节点存在，且（当前父节点的名字不存在 或者要找的组件不等于当前父节点的名字）
    parent = parent.$parent; // 获取此时父节点的父节点给parent
    if(parent){ // 如果存在
      name = parent.$options.name // 获取此时的节点名称
    }
  }
  return parent;
}
export {
  findComponentUpward,
};

步骤5：在组合模式下，Checkbox 选中，就不⽤对 Form 派发事件了，应 该在 CheckboxGroup 中派发，
      Checkbox 做最后的修改：
//checkbox.vue
 methods:{
      /** 监听，当父级修改时，同步修改内部的currentValue */
      updateModel () {
        this.currentValue = this.value === this.trueValue;
        console.log(this.currentValue, 'this.currentValue1111')
      },
      change(event){
        if(this.disabled){ // 当前复选框被禁用，则直接停止
          return false;
        }

        const checked = event.target.checked; // 获取当前复选框的是否选中的状态
        this.currentValue = checked  // 赋值

        const value = checked ? this.trueValue : this.falseValue
        this.$emit('input', value)
        if(this.group){
          console.log(this.model,'modelggg');
          this.parent.change(this.model)
        }else{
          this.$emit('change', value)
          // 向上级form-item派发on-form-change事件
          this.dispatch('cFormItem', 'on-form-change', value)
        }
      }
    }

步骤6：checkbox-gourp.vue
<template>
  <div>
    <slot></slot>
  </div>
</template>

<script>
  import { findComponentsDownward } from '@/assets/js/assist'
  import mixins from '@/assets/js/mixins'
  export default {
    name: "cCheckboxGroup",
    mixins:[mixins],
    props:{
      value: {
        type: Array,
        default(){
          return []
        }
      }
    },
    data(){
      return{
        currentValue: this.value,
        childrens: []
      }
    },
    watch:{
      value () {
        this.updateModel(true);
      }
    },
    mounted(){
      this.updateModel(true);
    },
    methods:{
      /** 更新子组件组件绑定的数据事件 */
      updateModel(update){
        this.childrens = findComponentsDownward(this, 'cCheckbox') // 向下查找所有的子组件，找到cCheckbox
        if(this.childrens){ // 如果存在cCheckbox类型的子组件
          const { value } = this; // const value = this.value
          this.childrens.forEach(child => { // 遍历子组件数组
            child.model = value ; // 将当前组件的value赋值给每一个子组件的model
            if (update) {
              child.currentValue = value.indexOf(child.label) >= 0; // 给子组件的currentValue赋值
              child.group = true; // 设置为复选框组合
            }
          })
        }
      },
      /** 在子组件中执行this.parent.change(参数)进行调用 */
      change(data){
        this.currentValue = data;
        this.$emit('input', data);
        this.$emit('change', data); // checkboxGroup标签的change事件
        this.dispatch('cFormItem', 'on-form-change', data); // 向上级组件formItem中派发on-form-change事件
      }
    }
  }
</script>
注：assist.js
/**  由一个组件，向下找到所有的指定的组件 */
function findComponentsDownward(context, componentName){
  return context.$children.reduce((components,child)=>{
    if(child.$options.name === componentName){
      components.push(child);
    }
    const foundChilds = findComponentsDownward(child, componentName)
    return components.concat(foundChilds)
  },[])
}
export {
  findComponentsDownward,
};
